#!/usr/bin/env python
try:
    #Python3
    from urllib.request import urlopen, urlretrieve
except:
    #Python2
    from urllib import urlretrieve
    import urllib2
    def urlopen(url):
        request = urllib2.Request(url)
        return urllib2.urlopen(request)
import tarfile
import zipfile
import sys
import os
import re
import argparse
from jinja2 import Environment, select_autoescape, FileSystemLoader
from lxml.html import fromstring
import subprocess
import json
from datetime import datetime
import traceback

setupconfigfilescript = '''
def writesetupconfig(**kwargs):
    import json
    setupconfig=dict()
    for k in kwargs.keys():
        try:
            #If it is JSON serializable
            dummy = json.dumps(kwargs[k])
            #Keep it
            setupconfig[k] = kwargs[k]
        except:
            #If not, don't keep it
            pass
    with open('{0}','w') as f:
        f.write(json.dumps(setupconfig))
'''

re_requiresplit = re.compile('^([^<>=!]*)([<>=!]+.*)')
re_limit = re.compile('([<>=!]+) *(\S*)')
re_setupfile = re.compile('(setuptools\.)?setup\s*\(')
re_setupimport = re.compile('^(\s*)(from\s+(setuptools|distutils.core)\s+import.*setup(,|$)|import\s+(setuptools|distutils.core))')

class pythonModuleException(Exception):
    pass

class python_module(dict):
    members = {}
    def __init__(self, *args, **kwargs):
        for arg in args:
            if isinstance(arg, dict):
                for k in arg:
                    self[k] = arg[k]
        for arg in kwargs:
            self[arg] = kwargs[arg]
        try:
            self.modulename = self['modulename'].lower()
        except KeyError:
            raise pythonModuleException('You didn\'t specify modulename')
        try:
            self.verbosity = int(self['verbosity'])
        except:
            self.verbosity = 0
        self.__class__.members[self.modulename] = self
        if not 'release' in self:
            self['release'] = '1%{?dist}'

    def realmodulename(self):
        try:
            return self['realmodulename']
        except:
            pass
        try:
            doap = self.get_doap()
            self['realmodulename'] = doap['info']['name']
        except Exception as e:
            print(e.__repr__())
            self['realmodulename'] = self.modulename
        return self['realmodulename']

    def addversionlimit(self, versions):
        version_objects = []
        for version in versions:
            if version[:2] == '>=':
                version_object = versionClass(version[2:].strip())
                version_objects.append(version_object.greater_equal)
            elif version[:2] == '<=':
                version_object = versionClass(version[2:].strip())
                version_objects.append(version_object.less_equal)
            elif version[:1] == '>':
                version_object = versionClass(version[1:].strip())
                version_objects.append(version_object.greater_then)
            elif version[:1] == '<':
                version_object = versionClass(version[1:].strip())
                version_objects.append(version_object.less_then)
            elif version[:1] == '=':
                version_object = versionClass(version[1:].strip())
                version_objects.append(version_object.equal)
            elif version[:2] == '!=':
                version_object = versionClass(version[2:].strip())
                version_objects.append(version_object.not_equal)
        try:
            self['versionlimits'] += version_objects
        except:
            self['versionlimits'] = version_objects
        try:
            del self['latestversion']
        except:
            pass

    def latest_version(self):
        try:
            latestversion = self['latestversion']
        except:
            latestversion = None
        if latestversion:
            return latestversion

        try:
            versionlimits = self['versionlimits']
        except:
            versionlimits = None

        for version in self.available_versions():
            version_unfit = False
            if versionlimits:
                for limit in versionlimits:
                    if not limit(version):
                        version_unfit = True
                        break
                if version_unfit:
                    break
            if latestversion:
                if latestversion.less_then(version):
                    continue
            latestversion = version
        if not latestversion:
            raise pythonModuleException('No latest version fits to version limits')
        self['latestversion'] = latestversion

        return latestversion

    def available_versions(self):
        try:
            versions = self['versions']
        except:
            versions = None
        if not versions:
            self.print_msg(3, 'Detecting all available versions')
            self['versionsurl'] = url = 'https://pypi.org/project/{0}/#history'.format(self.modulename)
            handler = urlopen(url)
            root = fromstring(handler.read())
            versions = self['versions'] = []
            for div in root.find_class("release__version"):
                for l in div.iterlinks():
                    versions.append(versionClass(l[0].text))
        for v in versions:
            yield(v)

    def get_doap(self):
        try:
            doap = self['doap']
        except:
            doap = None
        if not doap:
            self.print_msg(1, 'Downloading doap record')
            if 'version' in self:
                url="https://pypi.python.org/pypi/{0}/{1}/json".format(self.modulename, self['version'])
            else:
                url="https://pypi.python.org/pypi/{0}/json".format(self.modulename)
            self['doapurl'] = url
            handler = urlopen(url)
            doap = self['doap'] = json.loads(handler.read().decode('utf-8'))
        return doap

    def download_source(self):
        try:
            sourcepath=self['sourcepath']
        except:
            sourcepath=None
        if not sourcepath:
            url = self.downloadpage()
            source = self['source'] = os.path.basename(url)
            filename = source.split('#')[0]
            sourcepath = self['sourcepath'] = os.path.expanduser('~/rpmbuild/SOURCES/'+filename)
        if not os.path.exists(sourcepath):
            self.print_msg(1, 'Downloading sources')
            urlretrieve(url, sourcepath)
        return sourcepath

    def extract_source(self):
        sourcepath = self.download_source()
        try:
            extractedpath = self['extractedpath']
        except:
            extractedpath = None
        if not extractedpath:
            extractedpath = self['extractedpath'] = '/tmp/{0}-{1}'.format(self.realmodulename(), self.latest_version())
        if not os.path.exists(extractedpath):
            try:
                file_name_parts = os.path.basename(sourcepath).split('.')
                file_extension = '.'.join(file_name_parts[1:])
                file_extension_lower = file_extension.lower()
                if file_extension_lower.endswith('tar.gz') or file_extension_lower.endswith('tgz'):
                    archive = tarfile.open(sourcepath, mode='r:gz')
                elif file_extension_lower.endswith('tar'):
                    archive = tarfile.open(sourcepath, mode='r')
                elif file_extension_lower.endswith('zip'):
                    archive = zipfile.ZipFile(sourcepath, mode='r')
                else:
                    print(file_extension_lower)
                    raise pythonModuleException('Cannot extract {0} (unknown extension)'.format(sourcepath))
                self.print_msg(1, 'Extracting sources from {0}'.format(sourcepath))
                archive.extractall(path="/tmp")
            except:
                print('Error extracting {0}'.format(extractedpath))
                raise
        return extractedpath

    def get_setupconfig(self):
        extractedpath = self.extract_source()
        setupconfigfilepath = '{0}/writesetupconfig.py'.format(extractedpath, self.modulename)
        setupconfigjsonpath = '{0}/writesetupconfig.json'.format(extractedpath, self.modulename)

        if not os.path.exists(setupconfigfilepath):
            self.print_msg(2, 'Converting setup.py to writesetupconfig.py')
            setupfile = open('{0}/setup.py'.format(extractedpath), 'rb')
            setupconfigfile = open(setupconfigfilepath, 'w')
            for l in setupfile:
                l=l.decode('ascii', 'ignore')
                l = re_setupfile.sub('writesetupconfig(',l)
                setupconfigfile.write(l)
                m = re_setupimport.search(l.rstrip())
                if m:
                    indent = m.group(1)
                    for scriptline in setupconfigfilescript.format(setupconfigjsonpath).split('\n'):
                        setupconfigfile.write(indent+scriptline+'\n')
            setupfile.close()
            setupconfigfile.close()

        if not os.path.exists(setupconfigjsonpath):
            self.print_msg(2, 'Running writesetupconfig.py')
            writer = subprocess.Popen([sys.executable, setupconfigfilepath], cwd=extractedpath)
            writer.wait()

        if not 'setupconfig' in self:
            self.print_msg(3, 'Reading setupconfig.json')
            setupconfig = open(setupconfigjsonpath).read()
            if not len(setupconfig):
                raise pythonModuleException('Error getting setupconfig for {0} - {1}. {2} contains no data...'.format(self.modulename, self.latest_version(), setupconfigjsonpath))
            self['setupconfig'] = json.loads(open(setupconfigjsonpath).read())
        return self['setupconfig']

    def check_python_version(self):
        try:
            return self['check_python_version']
        except:
            pass
        self.print_msg(3, 'Detecting python_requires')
        python_version = versionClass('.'.join([ str(version) for version in sys.version_info]))
        config = self.get_setupconfig()
        try:
            requires = config['python_requires'].split(',')
        except:
            self['check_python_version'] = True
            return self['check_python_version']
        ret = True
        for require in requires:
            require = require.strip()
            if require[:2] == '>=':
                require_object = versionClass(require[2:].strip())
                if not python_version.greater_equal(require_object):
                    ret = False
                    break
            elif require[:2] == '<=':
                require_object = versionClass(require[2:].strip())
                if not python_version.less_equal(require_object):
                    ret = False
                    break
            elif require[:1] == '>':
                require_object = versionClass(require[1:].strip())
                if not python_version.greater_then(require_object):
                    ret = False
                    break
            elif require[:1] == '<':
                require_object = versionClass(require[1:].strip())
                if not python_version.less_then(require_object):
                    ret = False
                    break
            elif require[:1] == '=':
                require_object = versionClass(require[1:].strip())
                if not python_version.equal(require_object):
                    ret = False
                    break
            elif require[:2] == '!=':
                require_object = versionClass(require[2:].strip())
                if not python_version.not_equal(require_object):
                    ret = False
                    break
        self['check_python_version'] = ret
        return ret

    def requires(self):
        self.print_msg(3, 'Detecting requires')
        extractedpath = self.extract_source()
        config = self.get_setupconfig()
        requires = {}
        ret = {}
        for config_key in config.keys():
            config_key = config_key.strip()
            if not 'require' in config_key:
                continue
            if config_key == 'python_requires':
                continue
            self.print_msg(3, 'Detecting requires from '+config_key)
            requirechapter = config[config_key]

            if isinstance(requirechapter, list):
                try:
                    requires[config_key] += requirechapter
                except:
                    requires[config_key] = requirechapter
            elif isinstance(requirechapter, dict):
                for chapter in requirechapter.keys():
                    chapter = chapter.strip()
                    items = requirechapter[chapter]
                    if isinstance(items, str):
                        items = [items]
                    try:
                        requires[chapter] += items
                    except:
                        requires[chapter] = items
            elif isinstance(requirechapter, str):
                try:
                    requires[config_key].append(requirechapter)
                except:
                    requires[config_key] = [ requirechapter ]
            else:
                raise Exception('Unknown requirechapter type for {}'.format(requirechapter.__repr__()))
        for requirechapter in requires:
            try:
                switch_value = self['switches'][requirechapter]
            except:
                if 'test' in requirechapter:
                    switch_value = self['switches'][requirechapter] = False
                else:
                    switch_value = self['switches'][requirechapter] = True
            if not switch_value:
                continue
            for requirement in requires[requirechapter]:
                try:
                    requiresplitmatch = re_requiresplit.match(requirement)
                    if requiresplitmatch:
                        name  = requiresplitmatch.group(1)
                        versions = []
                        for version in requiresplitmatch.group(2).split(','):
                            if '!=' in version:
                                #!= isn't supported by rpmbuild. skip it.
                                pass
                            else:
                                limit_matches = re_limit.match(version).groups()
                                versions.append('{0} {1}'.format(*limit_matches))
                    else:
                        name = requirement
                        versions = []
                    ret[name.strip()] = versions
                except Exception as e:
                    pass
        try:
            requiresfilepath = os.path.join(extractedpath, self.modulename.replace('-', '_')+'.egg-info', 'requires.txt')
            with open(requiresfilepath) as requiresfile:
                self.print_msg(3, 'Reading requires from '+requiresfilepath)
                switch_value = True
                for line in requiresfile:
                    line = line.strip()
                    if '[' in line:
                        switch_name = line.replace('[','').replace(']','')
                        try:
                            switch_value = self['switches'][switch_name]
                        except:
                            switch_value = self['switches'][switch_name] = True
                        continue
                    elif switch_value:
                        m = re_requiresplit.match(line)
                        if m:
                            name  = m.group(1)
                            versions = []
                            for version in  m.group(2).split(','):
                                if '!=' in version:
                                    #!= isn't supported by rpmbuild. skip it.
                                    pass
                                else:
                                    limit_matches = re_limit.match(version).groups()
                                    versions.append('{0} {1}'.format(*limit_matches))
                            versions = [ '{0} {1}'.format(*(re_limit.match(v).groups())) for v in versions ]
                        else:
                            name = line
                            versions = []
                        name = name.strip()
                        if name:
                            ret[name.strip()] = versions
        except Exception as e:
            pass
        for k in ret:
            try:
                mod_valid = self.__class__.members[k].check_python_version()
            except:
                mod_valid = True
            if mod_valid:
                if ret[k]:
                    limits = ret[k]
                else:
                    limits = ['']
                yield (k, limits)

    def print_msg(self, verbosity, msg):
        if verbosity <= self.verbosity:
            print('{0}{1}: {2}'.format(' '*verbosity, self.modulename, msg))
            sys.stdout.flush()

    def generate_spec(self, templatepath=None):
        if not self.check_python_version():
            self.print_msg(1, 'Not building spec, because module not fit for this python version.')
            return
        doap = self.get_doap()
        config = self.get_setupconfig()
        self.print_msg(2, 'Detecting jinja variables from setupconfig')
        if 'summary' not in self:
            self['summary'] = doap['info']['summary']
        if 'long_description' in config.keys():
            self['description'] = description_sanitizer(config['long_description'])
        elif 'description' in config.keys():
            self['description'] = description_sanitizer(config['description'])
        else:
            self['description'] = ''
        self['version'] = self.latest_version()
        self['spec'] = os.path.expanduser('~/rpmbuild/SPECS/{0}-{1}.spec'.format(self.modulename, self.latest_version()))
        self['date'] = datetime.now().strftime('%a %b %-d %Y')
        if 'license' in config:
            self['license'] = config['license']
        elif 'pypi_license' in self:
            self['license'] = self['pypi_license']
        if not templatepath:
            try:
                templatepath = self['template']
            except:
                raise pythonModuleException('Please specify a jinja template to generate spec from.')
        self['requires'] = self.requires()
        if not 'buildfilelist' in self:
            self['buildfilelist'] = buildfilelist = {}
            buildfilelist['%{python3_sitelib}'] = buildfilesublist = set()
            buildfilesublist.add('%{python3_sitelib}/%{modname}-%{version}-py%{python3_version}.egg-info')
            buildfilesublist.add('%{python3_sitelib}/%{modname}')

        if not os.path.exists(self['spec']):
            self.print_msg(2, 'Creating spec from template')
            templatedir = os.path.dirname(templatepath)
            templatefile = os.path.basename(templatepath)
            env = Environment(loader = FileSystemLoader(templatedir), autoescape=select_autoescape(['html', 'xml']))
            template = env.get_template(templatefile)
            spec=open(self['spec'], 'w')
            spec.write(template.render(self))
            spec.close()
            self['spec_generated'] = True
        elif not 'spec_generated' in self:
            self['spec_generated'] = False

    def downloadpage(self):
        try:
            sourceurl = self['sourceurl']
        except:
            sourceurl = None

        if not sourceurl:
            self.print_msg(3, 'Detecting download page')
            dlpageurl = 'https://pypi.python.org/pypi/{0}/{1}'.format(self.modulename, self.latest_version())
            dlpagehandler = urlopen(dlpageurl)
            dlpageroot = fromstring(dlpagehandler.read())
            tablerows = dlpageroot.xpath("//tr")
            for tr in tablerows:
                try:
                    tablecols = tr.xpath("td")
                    dlurl = tablecols[0].xpath("span/a")[0].attrib['href']
                    dltype = tablecols[1].text.strip()
                    if dltype == 'Source':
                        sourceurl = self['sourceurl'] = dlurl
                        break
                except:
                    pass
            #Workaround, get License from pypi web url
            if not 'pypi_license' in self:
                for a in dlpageroot.xpath("//a"):
                    try:
                        if a.text.startswith('License :: OSI Approved :: '):
                            self['pypi_license'] = a.text.split('::')[-1].strip()
                    except:
                        pass
        if not sourceurl:
            raise pythonModuleException('Could not detect source url')
        return sourceurl

    def rpmvalue(self, key):
        out, err = subprocess.Popen(['rpm', '-E', key], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        return out.decode().strip()

    def release(self):
        return self.rpmvalue(self['release'])

    def arch(self):
        try:
            return self['buildarch']
        except:
            return 'noarch'

    def buildroot(self):
        try:
            return self['buildroot']
        except:
            return os.path.expanduser('~/rpmbuild/BUILDROOT/{0}-{1}.{3}'.format(self.modulename, self.latest_version(), self.release(), self.arch()))

    def createbuildfilelist(self):
        buildroot = self.buildroot()
        buildrootlen = len(buildroot)
        buildfilelist = dict()
        replacers = {}
        for rpmval in ['%{python3_sitelib}', '%{python3_sitearch}', '%{python_sitelib}', '%{python_sitearch}', '%{_bindir}', '%{_libdir}']:
            path = self.rpmvalue(rpmval)
            replacers[path] = rpmval
        sortedreplacers = sorted(replacers.keys(), key=len, reverse=True)
        for dirname, subdirs, files in os.walk(buildroot):
            dirname = dirname[buildrootlen:]
            chapter = 'other'
            for replacer in sortedreplacers:
                if dirname.startswith(replacer):
                    dirname = replacer+dirname[len(replacer):]
                    chapter = replacers[replacer]
                    break
            try:
                buildfilesublist = buildfilelist[chapter]
            except:
                buildfilesublist = buildfilelist[chapter] = set()
            if not dirname:
                dirname = '/'
            if not dirname[-1] == '/':
                dirname += '/'
            if '__pycache__' in dirname:
                dirname = dirname.split('__pycache__')[0] + '__pycache__'
                buildfilesublist.add('%exclude ' + dirname)
            elif 'debug' in dirname:
                parts = dirname.split('debug')
                dirname = parts[0] + 'debug' + parts[1].split('/')[0]
                buildfilesublist.add('%exclude ' + dirname)
            else:
                for filename in files:
                    filefullpath = dirname + filename
                    buildfilesublist.add(filefullpath)
        newkeys = set(buildfilelist.keys())
        oldkeys = set(self['buildfilelist'])
        #Find keys in one, but not the other
        if newkeys ^ oldkeys:
            changed = True
        else:
            for key in newkeys:
                #find elements in one, but not the other
                if len(buildfilesublist[key] ^ self['buildfilelist'][key]) > 0:
                    changed = True
        if changed:
            self['buildfilelist'] = buildfilelist
        return changed

    def build(self):
        if not self.check_python_version():
            self.print_msg(1, 'Not building spec, because module not fit for this python version.')
            return

        if not 'spec' in self:
            self.generate_spec()
        buildroot = self.buildroot()
        out, err = subprocess.Popen(['rpmspec', '--query', self['spec']], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        rpmlist = out.splitlines()
        if len(rpmlist):
            done = True
            for rpm in rpmlist:
                rpmfile = os.path.expanduser('~/rpmbuild/RPMS/noarch/{0}.rpm'.format(rpm))
                if os.path.exists(rpmfile):
                    pass
                elif os.path.exists(rpmfile.replace('noarch', 'x86_64')):
                    pass
                else:
                    done = False
                    break
            if done:
                return
        self.print_msg(1, 'Building rpm.')
        if self.verbosity >= 4:
            redirect = None
        else:
            redirect = open(os.devnull, 'w')
        for stage in ['p', 'c', 'i', 'l', 'a']:
            try:
                subprocess.check_call(['rpmbuild', '--short-circuit', '--buildroot={0}'.format(buildroot), '-b'+stage, self['spec']], stdout=redirect, stderr=redirect)
                if stage == 'a':
                    self.print_msg(0, 'Building rpm succesfully finished.'.format(stage))
            except Exception as e:
                if stage == 'i':
                   corrected = False
                   #In this stage, two things might be the issue: The architecture could be other than noarch and the %files section could be off.
                   corrected = self.createbuildfilelist()
                   if os.path.exists(os.path.join(buildroot, 'usr/lib64')) and self['spec_generated'] and self.arch() == 'noarch':
                       self['buildarch'] = 'x86_64'
                       corrected = True
                   if not corrected:
                       raise pythonModuleException('Building RPM Failed (no architecture change and no filelist change).')
                   os.unlink(self['spec'])
                   self.generate_spec()
                   try:
                       subprocess.check_call(['rpmbuild', '--buildroot={0}'.format(buildroot), '-bi', self['spec']], stdout=redirect, stderr=redirect)
                   except:
                       raise pythonModuleException('Building RPM Failed (even after architecture change and/or filelist change).')
                else:
                    raise pythonModuleException('Building rpm FAILED in stage {}.'.format(stage))
        try:
            redirect.close()
        except:
            pass

class versionException(Exception):
    pass

class versionClass(str):
    parts = None

    def greater_equal(self, other):
        if self.cmp(other) >= 0:
            return True
        else:
            return False

    def less_equal(self, other):
        if self.cmp(other) <= 0:
            return True
        else:
            return False

    def greater_then(self, other):
        if self.cmp(other) > 0:
            return True
        else:
            return False

    def less_then(self, other):
        if self.cmp(other) < 0:
            return True
        else:
            return False

    def equal(self, other):
        if self.cmp(other) == 0:
            return True
        else:
            return False

    def not_equal(self, other):
        if self.cmp(other) != 0:
            return True
        else:
            return False

    def cmp(self, other):
        '''
        cmp() returns 1 if other bigger, -1 if self bigger and 0 if the same.
        '''
        try:
            myParts = self.split()
            hisParts = other.split()
            smallestlen = min(len(myParts), len(hisParts))
        except:
            raise versionException('''Seems {0} is'n a valuable component to compare to {1}'''.format(other.__repr__(), self.__repr__()))
        i = 0
        for i in range(max(len(myParts), len(hisParts))):
            try:
                mine = myParts[i]
            except IndexError:
                return 1
            try:
                his = hisParts[i]
            except IndexError:
                return -1
            mineisstr = isinstance(mine, str)
            hisisstr  = isinstance(his, str)
            if mineisstr and not hisisstr:
                return 1
            elif hisisstr and not mineisstr:
                return -1
            elif mine < his:
                return 1
            elif mine > his:
                return -1
            i+=1
        return 0

    def split(self):
        if not self.parts:
            #Look at https://fedoraproject.org/wiki/Archive:Tools/RPM/VersionComparison for more info
            letter, digit, other = 'l', 'd', 'o'
            parts = []
            previous_type = None
            for c in self:
                if c >= 'a' and c <= 'z' or c >= 'A' and i <= 'Z':
                    c_type = letter
                elif c >= '0' and c <= '9':
                    c_type = digit
                else:
                    c_type = other
                if not previous_type:
                    #Processing first character
                    if c_type in [ letter, digit ]:
                        part = c
                    else:
                        #Seems to be that first character is not digit or letter.
                        #Thats interesting. Well, anyway, lets skip this one and test next character
                        continue
                elif previous_type == other and c_type == other:
                    #Still in between parts
                    pass
                elif previous_type == other:
                    #New part
                    part = c
                elif c_type == previous_type:
                    #Current and previous characters are both letter or both digit
                    part += c
                #elif c_type == other or c_type != previous_type:
                else:
                    #end of part
                    if previous_type == digit:
                        parts.append(int(part))
                    else:
                        parts.append(part)
                    if c_type != other:
                        part = c
                    else:
                        part = ""
                previous_type = c_type
            if part:
                if previous_type == digit:
                    parts.append(int(part))
                else:
                    parts.append(part)
            self.parts = tuple(parts)
        return self.parts

def description_sanitizer(desc):
    desc=desc.encode('ascii', 'ignore').decode()
    tag_re = re.compile(':[a-z]+:')
    empty_re = re.compile('^\s*$')
    empty_count = 0
    ret = []
    for l in desc.split('\n'):
        if '-----' in l:
            ret = ret[:-1]
            break
        elif '>>>' in l:
            pass
        elif '===' in l:
            pass
        elif '::' in l:
            pass
        elif tag_re.search(l):
            pass
        elif empty_re.search(l):
            empty_count += 1
            if empty_count == 1:
                ret.append(l)
        else:
            empty_count = 0
            ret.append(l)
    return '\n'.join(ret)

def download_modules_recursive(packages, args={}, recursive = False):
    try:
        verbosity = args['verbosity']
    except:
        verbosity = 1
    ret = {}
    for modulename, moduleversion in packages:
        modulename = modulename.lower()
        modargs = {}
        for arg in args:
            modargs[arg] = args[arg]
        modargs['modulename'] = modulename
        if modulename in python_module.members:
            mod = python_module.members[modulename]
            ret[modulename] = mod
        else:
            mod = python_module(modargs)
            ret[modulename] = mod
            if recursive:
                for submodinfo in mod.requires():
                    try:
                        mods = download_modules_recursive(packages = [submodinfo], args = args, recursive = recursive)
                        for k in mods:
                            ret[k] = mods[k]
                    except Exception as e:
                        print ('Exception occurred while retrieving info on module {}'.format(submodinfo[0]))
                        exc_type, exc_value, exc_traceback = sys.exc_info()
                        fname = os.path.split(exc_traceback.tb_frame.f_code.co_filename)[1]
                        print(exc_type, fname, exc_traceback.tb_lineno, exc_value)
                        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=(verbosity*3+1))
        if moduleversion:
            mod.addversionlimit(moduleversion)
    return ret

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate a spec file for a python module')
    parser.add_argument('-p', '--package', required=True, action='append', help='The python package to generate a spec for. You can add it multiple times.')
    parser.add_argument('-V', '--version', action='append', help='The version of the module to build a spec for')
    parser.add_argument('-v', '--verbose', action='count', help='The verbosity level (add multiple times for more verbosity)')
    parser.add_argument('-t', '--template', default='./templates/spec.jinja2', help='The jinja2 template to use')
    parser.add_argument('-n', '--buildername', default='J. Doe', help='The name of the person who is building')
    parser.add_argument('-e', '--buildermail', default='jdoe@example.com', help='The jinja2 template to use')
    parser.add_argument('-b', '--build', action='store_true', help='Actually try to build the rpm')
    parser.add_argument('-r', '--recursive', action='store_true', help='Also build rpms this module depends on')
    parser.add_argument('-s', '--switchfile', help='File for switches (this controls the requires to add)')

    options = parser.parse_args()

    for subdir in [ 'SPECS', 'SOURCES' ]:
        d = os.path.expanduser(os.path.join('~/rpmbuild', subdir))
        if not os.path.exists(d):
            os.makedirs(d, mode=0o750)

    if options.buildername:
        buildername = options.buildername
    else:
        fullname=options.buildermail.split('@')[0]
        if '.' in fullname:
            names = fullname.split('.')
        else:
            names = [ fullname[0], fullname[1:] ]
        buildername = '. '.join([ name.capitalize() for name in names ])

    template = os.path.abspath(os.path.expanduser(options.template))

    switches = {}
    if options.switchfile:
        if os.path.isfile(options.switchfile):
            if options.verbose > 1:
                print('Reading switchfile {}'.format(options.switchfile))
            switches = json.loads(open(options.switchfile).read())

    modargs = { 'buildername': buildername, 'buildermail': options.buildermail, 'template': template, 'verbosity': options.verbose, 'switches': switches }
    if options.version:
        versions = options.version
    else:
        versions = [''] * len(options.package)
    if len(versions) < len(options.package):
        versions += [''] * len(options.package)
    if len(versions) > len(options.package):
        versions = versions[:len(options.package)]
    packages = zip(options.package, versions)

    print('Downloading modules: {}'.format(", ".join(options.package)))
    mods = download_modules_recursive(packages, modargs, options.recursive)

    specerrors = set()
    for modname in sorted(mods.keys()):
        print('generating specs for', modname)
        try:
            mods[modname].generate_spec()
        except:
            print('Error while generating spec', modname)
            traceback.print_exc()

    builderrors = set()
    if options.build:
        print('Building all rpms')
        for modname in sorted(mods.keys()):
            if modname in specerrors:
                continue
            try:
                mods[modname].build()
            except:
                print('Error while building module', modname)
                traceback.print_exc()

    if options.switchfile:
        if options.verbose > 1:
            print('Writing switchfile {}'.format(options.switchfile))
        open(options.switchfile, 'w').write(json.dumps(switches, sort_keys=True, indent=4, separators=(',', ': ')))
    sys.exit(len(builderrors) + len(specerrors))
