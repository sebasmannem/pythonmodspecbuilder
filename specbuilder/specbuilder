#!/usr/bin/env python
'''
This module is meant to download python modules and craete specs and rpms out of them.
'''
import sys
import os
import re
from datetime import datetime
import argparse
import subprocess
import traceback
try:
    #Python3
    from urllib.request import urlopen, urlretrieve
except ImportError:
    #Python2
    from urllib import urlretrieve

    import urllib2
    def urlopen(url):
        '''
        This function is meant as a replacement for urlopen of python3
        '''
        request = urllib2.Request(url)
        return urllib2.urlopen(request)
import json
import tarfile
import zipfile
import yaml
from jinja2 import Environment, select_autoescape, FileSystemLoader
from lxml.html import fromstring

__SetupConfigFileScript__ = '''
def writesetupconfig(**kwargs):
    import json
    setupconfig=dict()
    for k in kwargs.keys():
        try:
            #If it is JSON serializable
            dummy = json.dumps(kwargs[k])
            #Keep it
            setupconfig[k] = kwargs[k]
        except:
            #If not, don't keep it
            pass
    with open('{0}','w') as f:
        f.write(json.dumps(setupconfig))
'''

class PythonModuleException(Exception):
    '''
    This exception is raised by a functional error in the PythonModule.
    '''
    pass

class PythonModule(dict):
    '''
    Objects of this class can hold all relevant data with regards to a python
    module downloaded from pypi.
    '''
    members = {}
    def __init__(self, *args, **kwargs):
        super(PythonModule, self).__init__(*args, **kwargs)
        for arg in args:
            if isinstance(arg, dict):
                for k in arg:
                    self[k] = arg[k]
        for arg in kwargs:
            self[arg] = kwargs[arg]
        try:
            self.modulename = self['modulename'].lower()
        except KeyError:
            raise PythonModuleException('You didn\'t specify modulename')
        try:
            self.verbosity = int(self['verbosity'])
        except ValueError:
            self.verbosity = 0
        self.__class__.members[self.modulename] = self
        if 'release' not in self:
            self['release'] = '1%{?dist}'

    def realmodulename(self):
        '''
        This method retrieves and returns the real name of the module (with
        correct case, a.o.).
        '''
        try:
            return self['realmodulename']
        except KeyError:
            pass
        try:
            doap = self.get_doap()
            self['realmodulename'] = doap['info']['name']
        except (KeyError, PythonModuleException) as error:
            print(error.__repr__())
            self['realmodulename'] = self.modulename
        return self['realmodulename']

    def addversionlimit(self, versions):
        '''
        This method adds a version limit (which limits the list of valid
        versions for the latest_version method).
        '''
        version_objects = []
        for version in versions:
            if version[:2] == '>=':
                version_object = VersionClass(version[2:].strip())
                version_objects.append(version_object.greater_equal)
            elif version[:2] == '<=':
                version_object = VersionClass(version[2:].strip())
                version_objects.append(version_object.less_equal)
            elif version[:1] == '>':
                version_object = VersionClass(version[1:].strip())
                version_objects.append(version_object.greater_then)
            elif version[:1] == '<':
                version_object = VersionClass(version[1:].strip())
                version_objects.append(version_object.less_then)
            elif version[:1] == '=':
                version_object = VersionClass(version[1:].strip())
                version_objects.append(version_object.equal)
            elif version[:2] == '!=':
                version_object = VersionClass(version[2:].strip())
                version_objects.append(version_object.not_equal)
        try:
            self['versionlimits'] += version_objects
        except TypeError:
            self['versionlimits'] = version_objects
        try:
            del self['latestversion']
        except KeyError:
            pass

    def latest_version(self):
        '''
        This method returns the latest version which fits to all version limits.
        '''
        try:
            latestversion = self['latestversion']
        except KeyError:
            latestversion = None
        if latestversion:
            return latestversion

        try:
            versionlimits = self['versionlimits']
        except KeyError:
            versionlimits = None

        available_versions = [v for v in self.available_versions()]
        for version in available_versions:
            version_unfit = False
            if versionlimits:
                for limit in versionlimits:
                    if not limit(version):
                        version_unfit = True
                        break
                if version_unfit:
                    continue
            if latestversion:
                if latestversion.less_then(version):
                    continue
            latestversion = version
        if not latestversion:
            for limit in versionlimits:
                self.print_msg(4, 'versionlimit: ' + limit.__repr__())
            self.print_msg(4, 'versions' + available_versions.__repr__())
            exceptstr = 'No latest version fits to version limits '
            exceptstr += versionlimits.__repr__()
            raise PythonModuleException(exceptstr)
        self['latestversion'] = latestversion

        return latestversion

    def available_versions(self):
        '''
        This method retrieves and returns all versions that are available of
        this module.
        '''
        try:
            versions = self['versions']
        except KeyError:
            versions = None
        if not versions:
            self.print_msg(3, 'Detecting all available versions')
            url = 'https://pypi.org/project/{0}/#history'.format(self.modulename)
            self['versionsurl'] = url
            handler = urlopen(url)
            root = fromstring(handler.read())
            versions = self['versions'] = []
            for div in root.find_class("release__version"):
                for link in div.iterlinks():
                    versions.append(VersionClass(link[0].text))
        for version in versions:
            yield version

    def get_doap(self):
        try:
            doap = self['doap']
        except KeyError:
            doap = None
        if not doap:
            self.print_msg(1, 'Downloading doap record')
            if 'version' in self:
                url="https://pypi.python.org/pypi/{0}/{1}/json".format(self.modulename, self['version'])
            else:
                url="https://pypi.python.org/pypi/{0}/json".format(self.modulename)
            self['doapurl'] = url
            handler = urlopen(url)
            doap = self['doap'] = json.loads(handler.read().decode('utf-8'))
        return doap

    def download_source(self):
        try:
            sourcepath=self['sourcepath']
        except KeyError:
            sourcepath=None
        if not sourcepath:
            url = self.downloadpage()
            source = self['source'] = os.path.basename(url)
            filename = source.split('#')[0]
            sourcepath = self['sourcepath'] = os.path.expanduser('~/rpmbuild/SOURCES/'+filename)
        if not os.path.exists(sourcepath):
            self.print_msg(1, 'Downloading sources')
            urlretrieve(url, sourcepath)
        return sourcepath

    def extract_source(self):
        sourcepath = self.download_source()
        try:
            extractedpath = self['extractedpath']
        except KeyError:
            extractedpath = None
        if not extractedpath:
            extractedpath = self['extractedpath'] = '/tmp/{0}-{1}'.format(self.realmodulename(), self.latest_version())
        if not os.path.exists(extractedpath):
            try:
                file_name_parts = os.path.basename(sourcepath).split('.')
                file_extension = '.'.join(file_name_parts[1:])
                file_extension_lower = file_extension.lower()
                if file_extension_lower.endswith('tar.gz') or file_extension_lower.endswith('tgz'):
                    archive = tarfile.open(sourcepath, mode='r:gz')
                elif file_extension_lower.endswith('tar'):
                    archive = tarfile.open(sourcepath, mode='r')
                elif file_extension_lower.endswith('zip'):
                    archive = zipfile.ZipFile(sourcepath, mode='r')
                else:
                    print(file_extension_lower)
                    raise PythonModuleException('Cannot extract {0} (unknown extension)'.format(sourcepath))
                self.print_msg(1, 'Extracting sources from {0}'.format(sourcepath))
                archive.extractall(path="/tmp")
            except:
                print('Error extracting {0}'.format(extractedpath))
                raise
        return extractedpath

    def get_setupconfig(self):
        extractedpath = self.extract_source()
        setupconfigfilepath = '{0}/writesetupconfig.py'.format(extractedpath)
        setupconfigjsonpath = '{0}/writesetupconfig.json'.format(extractedpath)
        import_res = [r'setuptools|distutils.core)\s+import.*setup(,|$)',
            r'import\s+(setuptools|distutils.core)']
        re_setupimport = re.compile(r'^(\s*)({})'.format('|'.join(import_res)))


        if not os.path.exists(setupconfigfilepath):
            self.print_msg(2, 'Converting setup.py to writesetupconfig.py')
            setupfile = open('{0}/setup.py'.format(extractedpath), 'rb')
            setupconfigfile = open(setupconfigfilepath, 'w')
            re_setupfile = re.compile(r'(setuptools\.)?setup\s*\(')
            added = False
            content = []
            for l in setupfile:
                l=l.decode('ascii', 'ignore')
                l = re_setupfile.sub('writesetupconfig(',l)
                content.append(l)
                m = re_setupimport.search(l.rstrip())
                if m:
                    added = True
                    indent = m.group(1)
                    for scriptline in __SetupConfigFileScript__.format(setupconfigjsonpath).split('\n'):
                        content.append(indent+scriptline+'\n')
                        added = True
            self.print_msg(4,'could not find setup import. adding writesetupconfig to the top of {}'.format(setupconfigfilepath))
            for line in content:
                if not added and line[0] != '#':
                    setupconfigfile.write(__SetupConfigFileScript__.format(setupconfigjsonpath)+'\n')
                    added = True
                setupconfigfile.write(line)
            setupfile.close()
            setupconfigfile.close()

        if not os.path.exists(setupconfigjsonpath):
            self.print_msg(2, 'Running writesetupconfig.py')
            writer = subprocess.Popen([sys.executable, setupconfigfilepath], cwd=extractedpath)
            writer.wait()

        if not 'setupconfig' in self:
            self.print_msg(3, 'Reading setupconfig.json')
            setupconfig = open(setupconfigjsonpath).read()
            if not len(setupconfig):
                raise PythonModuleException('Error getting setupconfig for {0} - {1}. {2} contains no data...'.format(self.modulename, self.latest_version(), setupconfigjsonpath))
            self['setupconfig'] = json.loads(open(setupconfigjsonpath).read())
        return self['setupconfig']

    def check_python_version(self):
        try:
            return self['check_python_version']
        except KeyError:
            pass
        self.print_msg(3, 'Detecting python_requires')
        python_version = VersionClass('.'.join([ str(version) for version in sys.version_info]))
        config = self.get_setupconfig()
        try:
            requires = config['python_requires'].split(',')
        except (KeyError, AttributeError):
            self['check_python_version'] = True
            return self['check_python_version']
        ret = True
        for require in requires:
            require = require.strip()
            if require[:2] == '>=':
                require_object = VersionClass(require[2:].strip())
                if not python_version.greater_equal(require_object):
                    ret = False
                    break
            elif require[:2] == '<=':
                require_object = VersionClass(require[2:].strip())
                if not python_version.less_equal(require_object):
                    ret = False
                    break
            elif require[:1] == '>':
                require_object = VersionClass(require[1:].strip())
                if not python_version.greater_then(require_object):
                    ret = False
                    break
            elif require[:1] == '<':
                require_object = VersionClass(require[1:].strip())
                if not python_version.less_then(require_object):
                    ret = False
                    break
            elif require[:1] == '=':
                require_object = VersionClass(require[1:].strip())
                if not python_version.equal(require_object):
                    ret = False
                    break
            elif require[:2] == '!=':
                require_object = VersionClass(require[2:].strip())
                if not python_version.not_equal(require_object):
                    ret = False
                    break
        self['check_python_version'] = ret
        return ret

    def requires(self):
        self.print_msg(3, 'Detecting requires')
        extractedpath = self.extract_source()
        config = self.get_setupconfig()
        requires = {}
        ret = {}
        for config_key in config.keys():
            config_key = config_key.strip()
            if not 'require' in config_key:
                continue
            if config_key == 'python_requires':
                continue
            self.print_msg(3, 'Detecting requires from '+config_key)
            requirechapter = config[config_key]

            if isinstance(requirechapter, list):
                try:
                    requires[config_key] += requirechapter
                except (KeyError, AttributeError):
                    requires[config_key] = requirechapter
            elif isinstance(requirechapter, dict):
                for chapter in requirechapter.keys():
                    chapter = chapter.strip()
                    items = requirechapter[chapter]
                    if isinstance(items, str):
                        items = [items]
                    try:
                        requires[chapter] += items
                    except (KeyError, AttributeError):
                        requires[chapter] = items
            elif isinstance(requirechapter, str):
                try:
                    requires[config_key].append(requirechapter)
                except KeyError:
                    requires[config_key] = [ requirechapter ]
            else:
                raise Exception('Unknown requirechapter type for {}'.format(requirechapter.__repr__()))

        re_requiresplit = re.compile(r'^([^<>=!]*)([<>=!]+.*)')
        re_limit = re.compile(r'([<>=!]+) *(\S*)')
        for requirechapter in requires:
            try:
                switch_value = self['require_chapters'][requirechapter]
            except KeyError:
                if 'test' in requirechapter:
                    switch_value = self['require_chapters'][requirechapter] = False
                else:
                    switch_value = self['require_chapters'][requirechapter] = True
            if not switch_value:
                self.print_msg(4, 'Skipping {} because it is disabled in switchfile'.format(requirechapter))
                continue
            for requirement in requires[requirechapter]:
                try:
                    requiresplitmatch = re_requiresplit.match(requirement)
                    if requiresplitmatch:
                        name  = requiresplitmatch.group(1)
                        versions = []
                        for version in requiresplitmatch.group(2).split(','):
                            if '!=' in version:
                                #!= isn't supported by rpmbuild. skip it.
                                pass
                            else:
                                limit_matches = re_limit.match(version).groups()
                                versions.append('{0} {1}'.format(*limit_matches))
                    else:
                        name = requirement
                        versions = []
                    ret[name.strip()] = versions
                except Exception:
                    pass
        try:
            requiresfilepath = os.path.join(extractedpath, self.modulename.replace('-', '_')+'.egg-info', 'requires.txt')
            with open(requiresfilepath) as requiresfile:
                self.print_msg(3, 'Reading requires from '+requiresfilepath)
                switch_value = True
                for line in requiresfile:
                    line = line.strip()
                    if '[' in line:
                        switch_name = line.replace('[','').replace(']','')
                        try:
                            switch_value = self['require_chapters'][switch_name]
                        except KeyError:
                            switch_value = self['require_chapters'][switch_name] = True
                        continue
                    elif switch_value:
                        m = re_requiresplit.match(line)
                        if m:
                            name  = m.group(1)
                            versions = []
                            for version in  m.group(2).split(','):
                                if '!=' in version:
                                    #!= isn't supported by rpmbuild. skip it.
                                    pass
                                else:
                                    limit_matches = re_limit.match(version).groups()
                                    versions.append('{0} {1}'.format(*limit_matches))
                            versions = [ '{0} {1}'.format(*(re_limit.match(v).groups())) for v in versions ]
                        else:
                            name = line
                            versions = []
                        name = name.strip()
                        if name:
                            ret[name.strip()] = versions
                    else:
                        self.print_msg(4, 'Skipping {} because it is disabled in switchfile'.format(switch_name))
        except Exception:
            pass
        for k in ret:
            try:
                mod_valid = self.__class__.members[k].check_python_version()
            except (KeyError, PythonModuleException):
                mod_valid = True
            if mod_valid:
                if ret[k]:
                    limits = ret[k]
                else:
                    limits = ['']
                yield (k, limits)

    def print_msg(self, verbosity, msg):
        if verbosity <= self.verbosity:
            print('{0}{1}: {2}'.format(' '*verbosity, self.modulename, msg))
            sys.stdout.flush()

    def generate_spec(self, templatepath=None):
        if not self.check_python_version():
            self.print_msg(1, 'Not building spec, because module not fit for this python version.')
            return
        doap = self.get_doap()
        config = self.get_setupconfig()
        self.print_msg(2, 'Detecting jinja variables from setupconfig')
        if 'summary' not in self:
            self['summary'] = doap['info']['summary']
        if 'long_description' in config.keys():
            self['description'] = description_sanitizer(config['long_description'])
        elif 'description' in config.keys():
            self['description'] = description_sanitizer(config['description'])
        else:
            self['description'] = ''
        self['version'] = self.latest_version()
        self['spec'] = os.path.expanduser('~/rpmbuild/SPECS/{0}-{1}.spec'.format(self.modulename, self.latest_version()))
        self['date'] = datetime.now().strftime('%a %b %-d %Y')
        if 'license' in config:
            self['license'] = config['license']
        elif 'pypi_license' in self:
            self['license'] = self['pypi_license']
        if not templatepath:
            try:
                templatepath = self['template']
            except:
                raise PythonModuleException('Please specify a jinja template to generate spec from.')
        self['requires'] = self.requires()
        if not 'buildfilelist' in self:
            self['buildfilelist'] = buildfilelist = {}
            buildfilelist['%{python3_sitelib}'] = buildfilesublist = set()
            buildfilesublist.add('%{python3_sitelib}/%{modname}-%{version}-py%{python3_version}.egg-info')
            buildfilesublist.add('%{python3_sitelib}/%{modname}')

        if not os.path.exists(self['spec']):
            self.print_msg(2, 'Creating spec from template')
            templatedir = os.path.dirname(templatepath)
            templatefile = os.path.basename(templatepath)
            env = Environment(loader = FileSystemLoader(templatedir), autoescape=select_autoescape(['html', 'xml']))
            template = env.get_template(templatefile)
            spec=open(self['spec'], 'w')
            spec.write(template.render(self))
            spec.close()
            self['spec_generated'] = True
        elif not 'spec_generated' in self:
            self['spec_generated'] = False

    def downloadpage(self):
        try:
            sourceurl = self['sourceurl']
        except KeyError:
            sourceurl = None

        if not sourceurl:
            self.print_msg(3, 'Detecting download page')
            dlpageurl = 'https://pypi.python.org/pypi/{0}/{1}'.format(self.modulename, self.latest_version())
            dlpagehandler = urlopen(dlpageurl)
            dlpageroot = fromstring(dlpagehandler.read())
            tablerows = dlpageroot.xpath("//tr")
            for tr in tablerows:
                try:
                    tablecols = tr.xpath("td")
                    dlurl = tablecols[0].xpath("span/a")[0].attrib['href']
                    dltype = tablecols[1].text.strip()
                    if dltype == 'Source':
                        sourceurl = self['sourceurl'] = dlurl
                        break
                except Exception:
                    pass
            #Workaround, get License from pypi web url
            if not 'pypi_license' in self:
                for a in dlpageroot.xpath("//a"):
                    try:
                        if a.text.startswith('License :: OSI Approved :: '):
                            self['pypi_license'] = a.text.split('::')[-1].strip()
                    except (AttributeError, IndexError):
                        pass
        if not sourceurl:
            raise PythonModuleException('Could not detect source url')
        return sourceurl

    def release(self):
        return rpmvalue(self['release'])

    def arch(self):
        try:
            return self['buildarch']
        except KeyError:
            return 'noarch'

    def buildroot(self):
        try:
            return self['buildroot']
        except KeyError:
            return os.path.expanduser('~/rpmbuild/BUILDROOT/{0}-{1}.{2}'.format(self.modulename, self.latest_version(), self.arch()))

    def createbuildfilelist(self):
        buildroot = self.buildroot()
        buildrootlen = len(buildroot)
        buildfilelist = dict()
        replacers = {}
        for rpmval in ['%{python3_sitelib}', '%{python3_sitearch}', '%{python_sitelib}', '%{python_sitearch}', '%{_bindir}', '%{_libdir}']:
            path = rpmvalue(rpmval)
            replacers[path] = rpmval
        sortedreplacers = sorted(replacers.keys(), key=len, reverse=True)
        for dirname, _subdirs, files in os.walk(buildroot):
            dirname = dirname[buildrootlen:]
            chapter = 'other'
            for replacer in sortedreplacers:
                if dirname.startswith(replacer):
                    dirname = replacer+dirname[len(replacer):]
                    chapter = replacers[replacer]
                    break
            try:
                buildfilesublist = buildfilelist[chapter]
            except KeyError:
                buildfilesublist = buildfilelist[chapter] = set()
            if not dirname:
                dirname = '/'
            if not dirname[-1] == '/':
                dirname += '/'
            if '__pycache__' in dirname:
                dirname = dirname.split('__pycache__')[0] + '__pycache__'
                buildfilesublist.add('%exclude ' + dirname)
            elif 'debug' in dirname:
                parts = dirname.split('debug')
                dirname = parts[0] + 'debug' + parts[1].split('/')[0]
                buildfilesublist.add('%exclude ' + dirname)
            else:
                for filename in files:
                    filefullpath = dirname + filename
                    buildfilesublist.add(filefullpath)
        newkeys = set(buildfilelist.keys())
        oldkeys = set(self['buildfilelist'])
        #Find keys in one, but not the other
        if newkeys ^ oldkeys:
            changed = True
        else:
            for key in newkeys:
                #find elements in one, but not the other
                if len(buildfilesublist[key] ^ self['buildfilelist'][key]) > 0:
                    changed = True
        if changed:
            self['buildfilelist'] = buildfilelist
        return changed

    def build(self):
        if not self.check_python_version():
            self.print_msg(1, 'Not building spec, because module not fit for this python version.')
            return

        if not 'spec' in self:
            self.generate_spec()
        buildroot = self.buildroot()
        out, _err = subprocess.Popen(['rpmspec', '--query', self['spec']], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
        rpmlist = out.splitlines()
        if len(rpmlist):
            done = True
            for rpm in rpmlist:
                rpmfile = os.path.expanduser('~/rpmbuild/RPMS/noarch/{0}.rpm'.format(rpm))
                if os.path.exists(rpmfile):
                    pass
                elif os.path.exists(rpmfile.replace('noarch', 'x86_64')):
                    pass
                else:
                    done = False
                    break
            if done:
                return
        self.print_msg(1, 'Building rpm.')
        if self.verbosity >= 4:
            redirect = None
        else:
            redirect = open(os.devnull, 'w')
        for stage in ['p', 'c', 'i', 'l', 'a']:
            try:
                subprocess.check_call(['rpmbuild', '--short-circuit', '--buildroot={0}'.format(buildroot), '-b'+stage, self['spec']], stdout=redirect, stderr=redirect)
                if stage == 'a':
                    self.print_msg(0, 'Building rpm succesfully finished.')
            except subprocess.CalledProcessError:
                if stage == 'i':
                    corrected = False
                    #In this stage, two things might be the issue: The architecture could be other than noarch and the %files section could be off.
                    corrected = self.createbuildfilelist()
                    if os.path.exists(os.path.join(buildroot, 'usr/lib64')) and self['spec_generated'] and self.arch() == 'noarch':
                        self['buildarch'] = 'x86_64'
                        corrected = True
                    if not corrected:
                        raise PythonModuleException('Building RPM Failed (no architecture change and no filelist change).')
                    os.unlink(self['spec'])
                    self.generate_spec()
                    try:
                        subprocess.check_call(['rpmbuild', '--buildroot={0}'.format(buildroot), '-bi', self['spec']], stdout=redirect, stderr=redirect)
                    except:
                        raise PythonModuleException('Building RPM Failed (even after architecture change and/or filelist change).')
                else:
                    raise PythonModuleException('Building rpm FAILED in stage {}.'.format(stage))
        try:
            redirect.close()
        except AttributeError:
            pass

def rpmvalue(key):
    out, _err = subprocess.Popen(['rpm', '-E', key], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
    return out.decode().strip()

class VersionException(Exception):
    '''
    VersionException is raised when the VersionClass runs into an issue.
    '''
    pass

class VersionClass(str):
    '''
    VersionClass is used to convert a string version like '1.0.1b' into a tuple like (1, 0, 1, 'b').
    Furthermore, the Versionclass can compare two versions.
    '''
    parts = None

    def greater_equal(self, other):
        '''
        VersionClass.greater_equal() will return true when the value passed (other)
        is greater then or equal to the VersionClass owning this function (self).
        '''
        return bool(self.cmp(other) >= 0)

    def less_equal(self, other):
        '''
        VersionClass.less_equal() will return true when the value passed (other)
        is less then or equal to the VersionClass owning this function (self).
        '''
        return bool(self.cmp(other) <= 0)

    def greater_then(self, other):
        '''
        VersionClass.greater_then() will return true when the value passed (other)
        is greater then the VersionClass owning this function (self).
        '''
        return bool(self.cmp(other) > 0)

    def less_then(self, other):
        '''
        VersionClass.less_then() will return true when the value passed (other)
        is less then the VersionClass owning this function (self).
        '''
        return bool(self.cmp(other) < 0)

    def equal(self, other):
        '''
        VersionClass.equal() will return true when the value passed (other)
        is equal to the VersionClass owning this function (self).
        '''
        return bool(self.cmp(other) == 0)

    def not_equal(self, other):
        '''
        VersionClass.not_equal() will return true when the value passed (other)
        is not equal to the VersionClass owning this function (self).
        '''
        return bool(self.cmp(other) != 0)

    def cmp(self, other):
        '''
        VersionClass.cmp() compares the version passed (other) to the version owning this
        cmp function (self) and returns 1 if other is bigger, -1 if self is bigger and 0 if they are equal.
        '''
        try:
            myParts = self.split()
            hisParts = other.split()
        except:
            raise VersionException('''Seems {0} is'n a valuable component to compare to {1}'''.format(other.__repr__(), self.__repr__()))
        ret = 0
        for i in range(max(len(myParts), len(hisParts))):
            try:
                mine = myParts[i]
            except IndexError:
                ret = 1
                break
            try:
                his = hisParts[i]
            except IndexError:
                ret = -1
                break
            mineisstr = isinstance(mine, str)
            hisisstr  = isinstance(his, str)
            if mineisstr and not hisisstr:
                ret = 1
                break
            elif hisisstr and not mineisstr:
                ret = -1
                break
            elif mine < his:
                ret = 1
                break
            elif mine > his:
                ret = -1
                break
        return ret

    def split(self):
        '''
        VersionClass.split() is used to convert a string version like '1.0.1b' into a tuple like (1, 0, 1, 'b').
        '''
        if not len(self):
            self.parts = tuple()
        elif not self.parts:
            #Look at https://fedoraproject.org/wiki/Archive:Tools/RPM/VersionComparison for more info
            letter, digit, other = 'l', 'd', 'o'
            parts = []
            previous_type = None
            for char in self:
                if char >= 'a' and char <= 'z' or char >= 'A' and char <= 'Z':
                    c_type = letter
                elif char >= '0' and char <= '9':
                    c_type = digit
                else:
                    c_type = other
                if not previous_type:
                    #Processing first character
                    if c_type in [ letter, digit ]:
                        part = char
                    else:
                        #Seems to be that first character is not digit or letter.
                        #Thats interesting. Well, anyway, lets skip this one and test next character
                        continue
                elif previous_type == other and c_type == other:
                    #Still in between parts
                    pass
                elif previous_type == other:
                    #New part
                    part = char
                elif c_type == previous_type:
                    #Current and previous characters are both letter or both digit
                    part += char
                #elif c_type == other or c_type != previous_type:
                else:
                    #end of part
                    if previous_type == digit:
                        parts.append(int(part))
                    else:
                        parts.append(part)
                    if c_type != other:
                        part = char
                    else:
                        part = ""
                previous_type = c_type
            if part:
                if previous_type == digit:
                    parts.append(int(part))
                else:
                    parts.append(part)
            self.parts = tuple(parts)
        return self.parts

def description_sanitizer(desc):
    desc=desc.encode('ascii', 'ignore').decode()
    tag_re = re.compile(':[a-z]+:')
    empty_re = re.compile(r'^\s*$')
    empty_count = 0
    ret = []
    for l in desc.split('\n'):
        if '-----' in l:
            ret = ret[:-1]
            break
        elif '>>>' in l:
            pass
        elif '===' in l:
            pass
        elif '::' in l:
            pass
        elif tag_re.search(l):
            pass
        elif empty_re.search(l):
            empty_count += 1
            if empty_count == 1:
                ret.append(l)
        else:
            empty_count = 0
            ret.append(l)
    return '\n'.join(ret)

def download_modules_recursive(packages, args=None, recursive = False):
    args = args or {}
    try:
        verbosity = args['verbosity']
    except KeyError:
        verbosity = 1
    ret = {}
    for modulename, moduleversion in packages:
        modulename = modulename.lower()
        modargs = {}
        for arg in args:
            modargs[arg] = args[arg]
        modargs['modulename'] = modulename
        try:
            modargs['extra_requires'] = args['extra_requires'][modulename]
        except KeyError:
            modargs['extra_requires'] = []
        if modulename in PythonModule.members:
            mod = PythonModule.members[modulename]
            ret[modulename] = mod
        else:
            mod = PythonModule(modargs)
            ret[modulename] = mod
            if recursive:
                for submodinfo in mod.requires():
                    if submodinfo[0] in args['skip_builds']:
                        if args['verbosity'] > 3:
                            print('    Skippping {} because it is disabled in switchfile.'.format(submodinfo[0]))
                        continue
                    try:
                        mods = download_modules_recursive(packages = [submodinfo], args = args, recursive = recursive)
                        for k in mods:
                            ret[k] = mods[k]
                    except Exception:
                        print ('Exception occurred while retrieving info on module {}'.format(submodinfo[0]))
                        exc_type, exc_value, exc_traceback = sys.exc_info()
                        fname = os.path.split(exc_traceback.tb_frame.f_code.co_filename)[1]
                        print(exc_type, fname, exc_traceback.tb_lineno, exc_value)
                        traceback.print_exception(exc_type, exc_value, exc_traceback, limit=(verbosity*3+1))
        if moduleversion:
            mod.addversionlimit(moduleversion)
    return ret

def main():
    parser = argparse.ArgumentParser(description='Generate a spec file for a python module')
    parser.add_argument('-p', '--package', required=True, action='append', help='The python package to generate a spec for. You can add it multiple times.')
    parser.add_argument('-V', '--version', action='append', help='The version of the module to build a spec for')
    parser.add_argument('-v', '--verbose', action='count', help='The verbosity level (add multiple times for more verbosity)')
    parser.add_argument('-t', '--template', default='./templates/spec.jinja2', help='The jinja2 template to use')
    parser.add_argument('-n', '--buildername', default='J. Doe', help='The name of the person who is building')
    parser.add_argument('-e', '--buildermail', default='jdoe@example.com', help='The jinja2 template to use')
    parser.add_argument('-b', '--build', action='store_true', help='Actually try to build the rpm')
    parser.add_argument('-r', '--recursive', action='store_true', help='Also build rpms this module depends on')
    parser.add_argument('-s', '--switchfile', help='File for switches (this controls the requires to add)')

    options = parser.parse_args()

    for subdir in [ 'SPECS', 'SOURCES' ]:
        d = os.path.expanduser(os.path.join('~/rpmbuild', subdir))
        if not os.path.exists(d):
            os.makedirs(d, mode=0o750)

    if options.buildername:
        buildername = options.buildername
    else:
        fullname=options.buildermail.split('@')[0]
        if '.' in fullname:
            names = fullname.split('.')
        else:
            names = [ fullname[0], fullname[1:] ]
        buildername = '. '.join([ name.capitalize() for name in names ])

    template = os.path.abspath(os.path.expanduser(options.template))

    switches = {}
    if options.switchfile:
        if os.path.isfile(options.switchfile):
            if options.verbose > 1:
                print('Reading switchfile {}'.format(options.switchfile))

            try:
                switches = yaml.load(open(options.switchfile))
            except Exception:
                switches = json.loads(open(options.switchfile).read())

    modargs = { 'buildername': buildername, 'buildermail': options.buildermail, 'template': template, 'verbosity': options.verbose }
    for chapter in ['extra_requires', 'skip_builds', 'require_chapters']:
        if chapter not in switches:
            switches[chapter] = {}
        modargs[chapter] = switches[chapter]

    versions = []
    for i in range(len(options.package)):
        try:
            version = options.version[i]
            if version[:2] in ['>=', '<=', '!=']:
                pass
            elif version[:1] in ['>', '<', '=']:
                pass
            else:
                version = '='+version
        except Exception:
            version = ''
        versions.append([version])
    packages = zip(options.package, versions)

    print('Downloading modules: {}'.format(", ".join(options.package)))
    mods = download_modules_recursive(packages, modargs, options.recursive)

    specerrors = set()
    for modname in sorted(mods.keys()):
        print('generating specs for', modname)
        try:
            mods[modname].generate_spec()
        except Exception:
            print('Error while generating spec', modname)
            traceback.print_exc()

    builderrors = set()
    if options.build:
        print('Building all rpms')
        for modname in sorted(mods.keys()):
            if modname in specerrors:
                continue
            try:
                mods[modname].build()
            except Exception:
                print('Error while building module', modname)
                traceback.print_exc()

    if options.switchfile:
        if options.verbose > 0:
            print('Writing switchfile {}'.format(options.switchfile))
        open(options.switchfile, 'w').write(yaml.dump(switches, default_flow_style=False ))
    sys.exit(len(builderrors) + len(specerrors))

if __name__ == "__main__":
    main()
